------------------------------------------------------------------------------------------------------------------------------------------------
1) Create 1 Ubuntu instances with following resources: 
1) Instance type: t2.small
2) Number of instance: 1
3) Name of the instances: Docker
2) For this instances you need to add Inbound rules on Security Groups with following options:
1) Type: Custom TCP  
2) Port range: 3000
3) CIDR Blocks- 0.0.0.0/0 
3) Install Docker On Instance
1. wget https://releases.rancher.com/install-docker/20.10.sh
2. sh 20.10.sh
3. sudo systemctl status docker
4. sudo chmod 777 /var/run/docker.sock

4) Clone repo, we have services backend, frontend and we need to dockerize both of services: Create Dockerfile, Build Image and then run containers
1. git clone https://github.com/Ttsartsidze/NodeJs-Application.git
2. Create Dockerfile  with following options: 
Frontend Applicaton
1) Service version is node:14-alpine
2) Working directory is  /app
3) With environment   PATH /app/node_modules/.bin:$PATH (in p environment is ENV)
4) You need package*.json files in docker image to be able to run the command
5) Build this project with npm install
6) Copy all files from host to docker on working directory
7) Expose this image on 3000 port
8) Exectuion command is npm and start
      Backend Applicaton
            1) Service version is node:10-alpine
            2) Working directory  is /usr/src/app
            3) You need package*.json files in docker image to be able to run the command
            4) Build this project with command npm install
            5) Copy all files from host to docker on working directory
            6) Expose this image on 3001 port
            7) Exectuion command is node and server.js
3. Build Dockers  
1. Build the Frontend Docker image with tag frontend
2. Build the Backend Docker image with tag backend
4. Run the image in a container: 
            1)  Run the frontend container in the background (daemon mode) with port 3000 from the container to port 3000 on the docker machine.
            2)  Run the backend container in the background (daemon mode) with port 3001 from the container to port 3001 on the docker machine.
5.  View your new container: docker ps -a
6. Check the logs for your containers: docker logs <container-id>
7. Check the port of the containers: docker port <container-id>
8. Open the app running on the docker machine:Browse this service with instance Public IPv4 DNS and Port 3000
4) Install Aws-cli on ubuntu instance:
1) sudo apt install awscli
5) Add ECR Repository on AWS with name frontend and backend From AWS UI
1) Retrieve an authentication token and authenticate your Docker client to your registry.
2) To get details about the current IAM identity: aws sts get-caller-identity
2) Tag your image so you can push the image to this repository: docker tag 
3) Push this image to your newly created AWS repository: docker push
------------------------------------------------------------PYTHON------------------------------------------------------------------------------------
First Application:
1) Clone repo, we have Python/Flask service and we need to dockerize both of services: Create Dockerfile, Build Image and then run containers
1. git clone https://github.com/Ttsartsidze/Python-Hello-World
2. Create Dockerfile  with following options: 
Frontend Applicaton
1) Service version is python:3-alpine
2) Working directory is  /service
4) You need requirements.txt  file in docker image to be able to run the command
5) Build this project with pip install -r requirements.txt
6) Copy all files from host to docker on working directory
7) Expose this image on 8080 port
8) Exectuion command is python3 and app.py
3. Build Dockers  
1. Build Docker image with tag python
4. Run the image in a container: 
            1)  Run the python container in the background (daemon mode) with port 8080 from the container to port 8080 on the docker machine.
5.  View your new container: docker ps -a
6. Check the logs for your containers: docker logs <container-id>
7. Check the port of the containers: docker port <container-id>
8. Open the app running on the docker machine:Browse this service with instance Public IPv4 DNS and Port 8080
2) For this instances you need to add Inbound rules on Security Groups with following options:
1) Type: Custom TCP  
2) Port range: 8080
3) CIDR Blocks- 0.0.0.0/0 
3) Install Aws-cli on ubuntu instance:
1) sudo apt install awscli
4) Add ECR Repository on AWS with name python-hello-world From AWS UI
1) Retrieve an authentication token and authenticate your Docker client to your registry.
2) To get details about the current IAM identity: aws sts get-caller-identity
2) Tag your python image so you can push the image to this repository: docker tag 
3) Push this image to your newly created AWS repository: docker push

Second Application:
1) Clone repo, we have Python Calculator service and we need to dockerize both of services: Create Dockerfile, Build Image and then run containers
1. git clone https://github.com/Ttsartsidze/Python-Calculator
2. Create Dockerfile  with following options: 
Frontend Applicaton
1) Service version is python:2.7
2) Working directory is  /app
4) You need /app folder in docker image to be able to run the command
5) Build this project with pip install -r requirements.txt
6) Copy all files from host to docker on working directory
7) Expose this image on 5000 port
8) Exectuion command is python and app.py
3. Build Dockers  
1. Build Docker image with tag calculator
4. Run the image in a container: 
            1)  Run the calculator container in the background (daemon mode) with port 5000 from the container to port 8082 on the docker machine.
5.  View your new container: docker ps -a
6. Check the logs for your containers: docker logs <container-id>
7. Check the port of the containers: docker port <container-id>
8. Open the app running on the docker machine:Browse this service with instance Public IPv4 DNS and Port 8082
2) For this instances you need to add Inbound rules on Security Groups with following options:
1) Type: Custom TCP  
2) Port range: 8082
3) CIDR Blocks- 0.0.0.0/0 
Test Examples:
input: (3+(4-1))*5 output: 30
input: 2 * x + 0.5 = 1 output: x = 0.25
input: 2*x + 1 = 2*(1-x) output: x = 0.25

3) Add ECR Repository on AWS with name python-calculator From AWS UI
1) Retrieve an authentication token and authenticate your Docker client to your registry.
2) To get details about the current IAM identity: aws sts get-caller-identity
2) Tag your python image so you can push the image to this repository: docker tag 
3) Push this image to your newly created AWS repository: docker push
------------------------------------------------------------NodeJS------------------------------------------------------------------------------------
1) Clone repo, we have NodeJS service and we need to dockerize both of services: Create Dockerfile, Build Image and then run containers
1. git clone https://github.com/Ttsartsidze/NodeJS-web-app
2. Create Dockerfile  with following options: 
1) Service version is node:10
2) Working directory is  /usr/app
4) You need package*.json files in docker image to be able to run the command
5) Build this project with npm install
6) Copy all files from host to docker on working directory
7) Expose this image on 8080 port
8) Exectuion command is node and server.js
3. Build Dockers  
1. Build Docker image with tag web-app
4. Run the image in a container: 
            1)  Run the web-app container in the background (daemon mode) with port 8080 from the container to port 8080 on the docker machine.
5.  View your new container: docker ps -a
6. Check the logs for your containers: docker logs <container-id>
7. Check the port of the containers: docker port <container-id>
8. Open the app running on the docker machine:Browse this service with instance Public IPv4 DNS and Port 8080
2) For this instances you need to add Inbound rules on Security Groups with following options:
1) Type: Custom TCP  
2) Port range: 8080
3) CIDR Blocks- 0.0.0.0/0
3) Install Aws-cli on ubuntu instance:
1) sudo apt install awscli
4) Add ECR Repository on AWS with name python-hello-world From AWS UI
1) Create ECR Repository with named: web-app
2) Retrieve an authentication token and authenticate your Docker client to your registry.
3) To get details about the current IAM identity: aws sts get-calleEr-identity
4) Tag your web-app image so you can push the image to this repository: docker tag 
5) Push this image to your newly created AWS repository: docker push
------------------------------------------------------------Java------------------------------------------------------------------------------------
1) Clone repo, we have Java service and we need to dockerize both of services: Create Dockerfile, Build Image and then run containers
1. git clone https://github.com/Ttsartsidze/Java-Hello-World
2. Create Dockerfile  with following options: 
Java Applicaton Multi-Stage Docker
First Stage:            
1) Service version is maven:3.8.3-openjdk-17
2) Copy all files from host to docker
3) Build this project with mvn clean package -Dmaven.test.skip=true (As a result of the build, we will have a jar file named: demo-0.0.1-SNAPSHOT.jar) Location: /target/demo-0.0.1-SNAPSHOT.jar
Second Stage: 
1) Service version is maven:3.8.3-openjdk-17
2) Copy jar file from build  to /app/demo-0.0.1-SNAPSHOT.jar
3) Expose this image on 8080 port
4) Run with non root user for example: 1002
5) Exectuion command is java -jar /app/demo-0.0.1-SNAPSHOT.jar with ENTRYPOINT
3. Build Dockers  
1. Build Docker image with tag java-demo
4. Run the image in a container: 
            1)  Run the java-demo container in the background (daemon mode) with port 8080 from the container to port 80 on the docker machine.
5.  View your new container: docker ps -a
6. Check the logs for your containers: docker logs <container-id>
7. Check the port of the containers: docker port <container-id>
8. Open the app running on the docker machine:Browse this service with instance Public IPv4 DNS and Port 80
2) For this instances you need to add Inbound rules on Security Groups with following options:
1) Type: Custom TCP  
2) Port range: 80
3) CIDR Blocks- 0.0.0.0/0 
3) Install Aws-cli on ubuntu instance:
1) sudo apt install awscli
2) aws configure
4) Add ECR Repository on AWS with name python-hello-world From AWS UI
1) Create ECR Repository with named: java-demo
2) Retrieve an authentication token and authenticate your Docker client to your registry.
3) To get details about the current IAM identity: aws sts get-caller-identity
4) Tag your  java-demo image so you can push the image to this repository: docker tag 
5) Push this image to your newly created AWS repository: docker push





